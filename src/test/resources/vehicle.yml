openapi: "3.0.0"
info:
  title: Vehicle API
  description: Vehicle API
  version: "1"
security: [ ]
servers:
  - url: /api/v1
paths:
  /vehicles:
    get:
      operationId: get-vehicles
      summary: List all vehicles
      responses:
        '200':
          description: A paged array of vehicles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Vehicle"
        '404':
          description: Not Found
    post:
      operationId: post-vehicles
      summary: Add a vehicle
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Vehicle"
      responses:
        '200':
          description: A paged array of vehicles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Vehicle"
        '400':
          description: Bad Request
  /vehicles/{id}:
    get:
      operationId: get-vehicle-by-id
      summary: Info for a specific vehicle
      parameters:
        - name: id
          required: true
          in: path
          description: The id of vehicle to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vehicle"
        '404':
          description: Vehicle of id not found

components:
  schemas:
    Vehicle:
      type: object
      required:
        - id
        - model
        - name
        - mileage
        - registration_number
        - manufactured_date
        - purchased_time
        - type
      properties:
        type:
          type: string
        id:
          type: integer
        model:
          type: string
        name:
          type: string
        can_fly:
          type: boolean
        mileage:
          type: number
        registration_number:
          type: integer
          format: int64
        manufactured_date:
          type: string
          format: date
        purchased_time:
          type: string
          format: date-time
      discriminator:
        propertyName: type
        mapping:
          car: "#/components/schemas/Car"
          plane: "#/components/schemas/Plane"
    Car:
      type: object
      required:
        - wheels
        - location
        - mileage
      properties:
        wheels:
          oneOf:
            - $ref: "#/components/schemas/Wheels"
        location:
          $ref: "#/components/schemas/Location"
        mileage:
          type: number
          format: float
      allOf:
        - $ref: "#/components/schemas/Vehicle"
    Plane:
      type: object
      required:
        - number_of_engines
        - plane_type
        - mileage
      properties:
        number_of_engines:
          type: integer
        airline_name:
          type: string
        wheels:
          oneOf:
            - $ref: "#/components/schemas/Wheels"
        plane_type:
          $ref: "#/components/schemas/PlaneType"
        mileage:
          type: number
          format: double
      allOf:
        - $ref: "#/components/schemas/Vehicle"
    Wheels:
      type: object
      required:
        - brand
      properties:
        brand:
          type: string
    PlaneType:
      type: string
      enum: [Prop, Jet]
    Location:
      type: string
